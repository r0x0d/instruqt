#!/bin/bash
while [ ! -f /opt/instruqt/bootstrap/host-bootstrap-completed ]
do
    echo "Waiting for Instruqt to finish booting the VM"
    sleep 1
done

# This has to be run after installation. 
systemctl enable --now cockpit.socket
firewall-cmd --add-service=cockpit --permanent
firewall-cmd --reload

subscription-manager config --rhsm.manage_repos=1
subscription-manager register --activationkey=${ACTIVATION_KEY} --org=12451665 --force

dnf -y install bind-utils
dnf -y install ipa-client

export IDM_SERVER_NAME=idmserver.${_SANDBOX_ID}.instruqt.io
export IDM_REPLICA_NAME=idmreplica.${_SANDBOX_ID}.instruqt.io
export IDM_CLIENT_NAME=idmclient.${_SANDBOX_ID}.instruqt.io


echo "Adding wheel" > /root/post-run.log
usermod -aG wheel rhel

echo "setting password" >> /root/post-run.log
echo redhat | passwd --stdin rhel

echo "enable bash completion in the root's instruqt shell" >> /root/post-run.log
echo "source /etc/profile.d/bash_completion.sh" >> /root/.bashrc

echo "setup the simple http app" >> /root/post-run.log

dnf -y install httpd mod_wsgi

sudo rm -f /etc/httpd/conf.d/welcome.conf

sudo sh -c "cat >/usr/share/httpd/app.py" <<EOF
def application(environ, start_response):
    start_response('200 OK', [('Content-Type', 'text/plain')])
    remote_user = environ.get('REMOTE_USER')
    if remote_user is not None:
        yield "LOGGED IN AS: {}\n".format(remote_user).encode('utf8')
    else:
        yield b"NOT LOGGED IN\n"
    yield b"\nREMOTE_* REQUEST VARIABLES:\n\n"
    for k, v in environ.items():
        if k.startswith('REMOTE_'):
            yield "  {}: {}\n".format(k, v).encode('utf8')
EOF

sudo sh -c "cat >/etc/httpd/conf.d/app.conf" <<EOF
<VirtualHost *:80>
    ServerName $IDM_CLIENT_NAME
    WSGIScriptAlias / /usr/share/httpd/app.py
    <Directory /usr/share/httpd>
        <Files "app.py">
            Require all granted
        </Files>
    </Directory>
</VirtualHost>
EOF

sudo firewall-cmd --permanent --add-service http
sudo firewall-cmd --reload

echo "DONE" >> /root/post-run.log

# Add an entry to the /etc/hosts file for the satellite server if it doesn't already exist.
tee -a /root/labsetup.sh << EOF
#!/bin/bash
IDM=\$(nslookup idmserver | awk '/^Address: / { print \$2 }')
nmcli conn mod 'Wired connection 1' ipv4.dns \$IDM
nmcli conn up 'Wired connection 1'
sleep 5
hostnamectl set-hostname $IDM_CLIENT_NAME
hostnamectl
nslookup $IDM_SERVER_NAME
EOF

chmod +x /root/labsetup.sh

mv /etc/yum.repos.d/google-cloud.repo /root
timedatectl set-timezone America/New_York

